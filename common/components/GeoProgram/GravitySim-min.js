import{Vector2}from"../../../3party/three/build/three.module.js";import PlotGPU from"./Plot/PlotGPU.js";import State from"./Integrator/State.js";import Geodesic from"./Geodesics/Geodesic.js";import BallTrail from"./Geodesics/Ball.js";import Surface from"./Surface/Surface.js";const parser=math.parser();class SurfaceGravity extends Surface{constructor(a){super(a)}setParamData(){this.gravity=.3,this.params={a:2,b:1.5,c:0,func:"a*(sin(b*u)+sin(b*v))/(1+u*u+v*v)"},this.paramData={a:{min:0,max:5,step:.01,name:"a"},b:{min:0,max:5,step:.01,name:"b"}}}setFunctionData(){super.setFunctionData();let a=this.params.a,t=this.params.b;this.name="SurfaceGravity";let i=parser.evaluate("f(u,v,a,b)=".concat(this.params.func));this.F=function(e,r){return i(e,r,a,t)}}buildUIFolder(a,t){super.buildUIFolder(a,t);let i=this,e=this.params.a,r=this.params.b;a.add(i.params,"func").name("f(u,v)=").onFinishChange((function(a){i.params.func=a;let s=parser.evaluate("f(u,v,a,b)=".concat(i.params.func));i.F=function(a,t){return s(a,t,e,r)},i.update({}),t()}))}}class GravitySim{constructor(){this.surface=new SurfaceGravity,this.surface.integrator.ep=.03,this.plot=new PlotGPU(this.surface);this.params={surface:this.surface,simSpeed:3,gravity:.5,trailPos:0,trailDir:0,trailVisible:!0};let a=this.buildTrailIniState();this.trail=new BallTrail(this.surface,a)}buildTrailIniState(){let a=new Vector2(this.surface.domain.u.min,this.params.trailPos),t=new Vector2(Math.cos(1.57075*this.params.trailDir),Math.sin(1.57075*this.params.trailDir));return new State(a,t)}addToScene(a){this.plot.addToScene(a),this.trail.addToScene(a)}addToUI(a){let t=this,i=t.params,e=function(){t.plot.update(),t.trail.updateSurface()};t.surface.buildUIFolder(a,e),a.add(i,"gravity",0,1,.01).name("Gravity").onChange((function(a){i.gravity=a,t.surface.gravity=5*a,t.surface.initialize(),e()}));let r=a.addFolder("Billiard");r.close(),r.add(i,"trailPos",t.surface.domain.v.min,t.surface.domain.v.max,.01).name("Position").onChange((function(a){i.trailPos=a;let e=t.buildTrailIniState();t.trail.update(e)})),r.add(i,"trailDir",-1,1,.01).name("Direction").onChange((function(a){i.trailDir=a;let e=t.buildTrailIniState();t.trail.update(e)})),r.add(i,"simSpeed",1,10,1).name("SimSpeed").onChange((function(a){i.simSpeed=a}))}tick(a,t){for(let a=0;a<this.params.simSpeed;a++)this.trail.stepForward()}}export default GravitySim;