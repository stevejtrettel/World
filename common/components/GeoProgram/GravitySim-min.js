import{Vector2}from"../../../3party/three/build/three.module.js";import PlotGPU from"./Plot/PlotGPU.js";import State from"./Integrator/State.js";import Geodesic from"./Geodesics/Geodesic.js";import Surface from"./Surface/Surface.js";const parser=math.parser();class SurfaceGravity extends Surface{constructor(e){super(e)}setParamData(){this.params={a:2,b:1.5,c:0,gravity:0,func:"a*(sin(b*u)+sin(b*v))/(1+u*u+v*v)"},this.paramData={a:{min:0,max:5,step:.01,name:"a"},b:{min:0,max:5,step:.01,name:"b"},c:{min:0,max:5,step:.01,name:"c"},gravity:{min:0,max:5,step:.01,name:"gravity"}}}setFunctionData(){super.setFunctionData();let e=this.params.a,a=this.params.b,t=this.params.c;this.name="SurfaceGravity";let i=parser.evaluate("f(u,v,a,b,c)=".concat(this.params.func));this.F=function(s,r){return i(s,r,e,a,t)}}buildUIFolder(e,a){super.buildUIFolder(e,a);let t=this,i=this.params.a,s=this.params.b,r=this.params.c;e.add(t.params,"func").name("f(u,v)=").onFinishChange((function(e){t.params.func=e;let o=parser.evaluate("f(u,v,a,b,c)=".concat(t.params.func));t.F=function(e,a){return o(e,a,i,s,r)},t.update({}),a()}))}}class GravitySim{constructor(){this.surface=new SurfaceGravity,this.plot=new PlotGPU(this.surface);this.params={surface:this.surface,geoPos:0,geoDir:0,geoVisible:!1};let e=this.buildGeodesicIniState();this.geodesic=new Geodesic(this.surface,e)}buildGeodesicIniState(){let e=new Vector2(this.surface.domain.u.min,this.params.geoPos),a=new Vector2(Math.cos(1.57075*this.params.geoDir),Math.sin(1.57075*this.params.geoDir));return new State(e,a)}addToScene(e){this.plot.addToScene(e),this.geodesic.addToScene(e),this.geodesic.setVisibility(this.params.geoVisible)}addToUI(e){let a=this,t=a.params;a.surface.buildUIFolder(e,(function(){a.plot.update(),a.geodesic.updateSurface()}));let i=e.addFolder("Geodesic");i.close(),i.add(t,"geoVisible").onChange((function(e){a.params.geoVisible=e,a.geodesic.setVisibility(e)})),i.add(t,"geoPos",a.surface.domain.v.min,a.surface.domain.v.max,.01).name("Position").onChange((function(e){t.geoPos=e;let i=a.buildGeodesicIniState();a.geodesic.update(i)})),i.add(t,"geoDir",-1,1,.01).name("Direction").onChange((function(e){t.geoDir=e;let i=a.buildGeodesicIniState();a.geodesic.update(i)}))}tick(e,a){}}export default GravitySim;