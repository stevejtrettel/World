import{DoubleSide,Mesh,MeshPhysicalMaterial,PlaneBufferGeometry}from"../../../3party/three/build/three.module.js";import ParametricSurface from"../../components/parametric/ParametricSurface.js";let planeMaterial=new MeshPhysicalMaterial({side:DoubleSide,transparent:!0,transmission:.95,clearcoat:1,ior:1}),surfaceOptions={clearcoat:1,roughness:.4};class MorseTorus{constructor(){this.range={u:{min:0,max:6.29},v:{min:0,max:6.29}},this.params={animate:!0,slice:0,xEqn:"1.5*(2.+cos(v))*cos(u)",yEqn:"1.5*(2.+cos(v))*sin(u)",zEqn:"1.5*sin(v)"},this.uniforms={slice:{type:"float",value:this.params.slice}},this.surfaceColor="\n            vec3 colorFn(vec2 uv, vec3 xyz){\n            \n                float height = xyz.y;\n            \n                 float grid1 = (1.-pow(abs(sin(3.14*height)),0.1))/10.;\n                 float grid2 = (1.-pow(abs(sin(3.*3.14*height)),0.1))/25.;\n                 float grid3 = (1.-pow(abs(sin(9.*3.14*height)),0.1))/50.;\n                 float grid = grid1+grid2+grid3;\n            \n           \n                if(abs(height-slice)<0.1){\n                    return vec3(0.8,0.8,0);\n              }\n              else if(height-slice<0.){\n                return vec3(0.03,0.03,0.1)+vec3(grid);\n              }\n              return vec3(0.03,0.1,0.03)+vec3(grid);\n            }\n        ",this.surface=new ParametricSurface(this.buildEquation(),this.range,this.uniforms,this.surfaceColor,surfaceOptions);let e=new PlaneBufferGeometry(20,20);this.slicePlane=new Mesh(e,planeMaterial),this.slicePlane.rotateX(Math.PI/2)}buildEquation(){return`vec3 eqn( vec2 uv ){\n            float u = uv.x;\n            float v = uv.y;\n            \n            float x = ${this.params.xEqn};\n            float y = ${this.params.yEqn};\n            float z = ${this.params.zEqn};\n            \n            return vec3(x,y,z);\n       }`}setSlice(e){this.params.slice=e,this.slicePlane.position.set(0,e,0),this.surface.update({slice:e})}addToScene(e){this.surface.addToScene(e),e.add(this.slicePlane)}addToUI(e){let a=this;e.add(a.params,"xEqn").name("x(u,v)=").onFinishChange((function(e){a.params.xEqn=e;let n=a.buildEquation();a.surface.setFunction(n)})),e.add(a.params,"yEqn").name("y(u,v)=").onFinishChange((function(e){a.params.yEqn=e;let n=a.buildEquation();a.surface.setFunction(n)})),e.add(a.params,"zEqn").name("z(u,v)=").onFinishChange((function(e){a.params.zEqn=e;let n=a.buildEquation();a.surface.setFunction(n)})),e.add(a.params,"animate").name("Animate"),e.add(a.params,"slice",-5,5,.01).name("Slice").onChange((function(e){a.setSlice(e)}))}tick(e,a){if(this.params.animate){let a=5*Math.sin(e/3);this.setSlice(a)}}}let ex=new MorseTorus;export default{ex:ex};