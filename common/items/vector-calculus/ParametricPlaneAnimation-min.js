import{Vector3,Color}from"../../../3party/three/build/three.module.js";import Vector from"../../components/basic-shapes/Vector.js";import ParametricSurface from"../../components/parametric/ParametricSurface.js";import DomainPlot from"../../components/vector-calculus/DomainPlot.js";let surfaceOptions={clearcoat:1,roughness:.4};const parser=math.parser();class ParametricPlaneAnimation{constructor(){this.params={ux:1,uy:.5,uz:.25,vx:.5,vy:1,vz:-.25,px:1,py:1,pz:1,uPos:.5,vPos:.5,showPos:!0,animate:!0},this.range={u:{min:-5,max:5},v:{min:-5,max:5}},this.uniforms={ux:{type:"float",value:this.params.ux},uy:{type:"float",value:this.params.uy},uz:{type:"float",value:this.params.uz},vx:{type:"float",value:this.params.vx},vy:{type:"float",value:this.params.vy},vz:{type:"float",value:this.params.vz},px:{type:"float",value:this.params.px},py:{type:"float",value:this.params.py},pz:{type:"float",value:this.params.pz},uPos:{type:"float",value:this.params.uPos},vPos:{type:"float",value:this.params.vPos},showPos:{type:"bool",value:this.params.showPos}};let a="\n       \n            float grid1 = (1.-pow(abs(sin(10.*3.14*uv.x)*sin(10.*3.14*uv.y)),0.1))/10.;\n             float grid2 = (1.-pow(abs(sin(50.*3.14*uv.x)*sin(50.*3.14*uv.y)),0.1))/25.;\n             float grid3 = (1.-pow(abs(sin(100.*3.14*uv.x)*sin(100.*3.14*uv.y)),0.1))/50.;\n             float grid = grid1+grid2+grid3;\n             \n             vec3 base =  0.6 + 0.4*cos(2.*3.14*uv.xyx+vec3(0,2,4));\n             vec3 final = base + 2.*vec3(grid);\n             \n             if(abs(uv.x-0.5)<0.002||abs(uv.y-0.5)<0.002){\n                final = vec3(0);\n             }\n             \n             if(showPos){\n                if(abs(uv.x-uPos)<0.01){\n                    final=vec3(0.7,0.05,0.1);\n                }\n                if(abs(uv.y-vPos)<0.01){\n                    final=vec3(0.1,0.05,0.7);\n                }\n                if(length(uv-vec2(uPos,vPos))<0.02){\n                    final=vec3(0);\n                }\n             }\n             \n             return final;\n        \n        ";this.domainColor=`\n           vec3 colorFn(vec2 uv){\n             ${a}\n           }\n        `,this.planeColor=`\n           vec3 colorFn(vec2 uv, vec3 xyz){\n             ${a}\n           }\n        `,this.buildJSEquation(),this.plane=new ParametricSurface(this.buildGLSLEquation(),this.range,this.uniforms,this.planeColor,surfaceOptions),this.domainPlot=new DomainPlot(this.params.eqn,this.range,this.uniforms,this.domainColor),this.domainPlot.setPosition(0,-10,0),this.u=new Vector(new Vector3(this.params.ux,this.params.uz,this.params.uy),new Color(.1,.05,.7)),this.v=new Vector(new Vector3(this.params.vx,this.params.vz,this.params.vy),new Color(.7,.05,.1)),this.u.setPos(new Vector3(this.params.px,this.params.py,this.params.pz)),this.v.setPos(new Vector3(this.params.px,this.params.py,this.params.pz))}buildGLSLEquation(){return"vec3 eqn( vec2 uv ){\n            vec3 u = vec3(ux,uy,uz);\n            vec3 v = vec3 (vx,vy,vz);\n            vec3 p = vec3 (px,py,pz);\n            \n            return p+uv.x*u+uv.y*v;\n       }"}buildJSEquation(){let a=parser.evaluate("xEqn(u,v,ux,vx,px)=px+ux*u+vx*v"),s=parser.evaluate("yEqn(u,v,uy,vy,py)=py+uy*u+vy*v"),e=parser.evaluate("zEqn(u,v,uz,vz,pz)=pz+uz*u+vz*v");this.eqn=function(t,p,r={ux:1,uy:0,uz:0,vx:0,vy:1,vz:0,px:1,py:1,pz:1}){let n=a(t,p,r.ux,r.vx,r.px),o=s(t,p,r.ux,r.vx,r.px),i=e(t,p,r.ux,r.vx,r.px);return new Vector3(n,o,i)}}addToScene(a){this.plane.addToScene(a),this.domainPlot.addToScene(a),this.u.addToScene(a),this.v.addToScene(a)}addToUI(a){let s=this,e=a.addFolder("Point p");e.add(s.params,"px",-2,2,.01).name("Px").onChange((function(a){s.params.px=a,s.plane.update({px:a}),s.u.setPos(new Vector3(s.params.px,s.params.py,s.params.pz)),s.v.setPos(new Vector3(s.params.px,s.params.py,s.params.pz))})),e.add(s.params,"pz",-2,2,.01).name("Py").onChange((function(a){s.params.pz=a,s.plane.update({pz:a}),s.u.setPos(new Vector3(s.params.px,s.params.py,s.params.pz)),s.v.setPos(new Vector3(s.params.px,s.params.py,s.params.pz))})),e.add(s.params,"py",-2,2,.01).name("Pz").onChange((function(a){s.params.py=a,s.plane.update({py:a}),s.u.setPos(new Vector3(s.params.px,s.params.py,s.params.pz)),s.v.setPos(new Vector3(s.params.px,s.params.py,s.params.pz))}));let t=a.addFolder("Vector u");t.add(s.params,"ux",-2,2,.01).name("Ux").onChange((function(a){s.plane.update({ux:a}),s.u.setDir(new Vector3(s.params.ux,s.params.uz,s.params.uy))})),t.add(s.params,"uz",-2,2,.01).name("Uy").onChange((function(a){s.params.uz=a,s.plane.update({uz:a}),s.u.setDir(new Vector3(s.params.ux,s.params.uy,s.params.uz))})),t.add(s.params,"uy",-2,2,.01).name("Uz").onChange((function(a){s.params.uy=a,s.plane.update({uy:a}),s.u.setDir(new Vector3(s.params.ux,s.params.uy,s.params.uz))}));let p=a.addFolder("Vector v");p.add(s.params,"vx",-2,2,.01).name("Vx").onChange((function(a){s.params.vx=a,s.plane.update({vx:a}),s.v.setDir(new Vector3(s.params.vx,s.params.vy,s.params.vz))})),p.add(s.params,"vz",-2,2,.01).name("Vy").onChange((function(a){s.params.uz=a,s.plane.update({vz:a}),s.v.setDir(new Vector3(s.params.vx,s.params.vy,s.params.vz))})),p.add(s.params,"vy",-2,2,.01).name("Vz").onChange((function(a){s.params.vy=a,s.plane.update({vy:a}),s.v.setDir(new Vector3(s.params.vx,s.params.vy,s.params.vz))}))}tick(a,s){if(this.params.animate){let s=Math.sin(a),e=Math.sin(a/3);this.params.uPos=(s+1)/2,this.params.vPos=(e+1)/2;let t=new Vector3(this.params.ux,this.params.uy,this.params.uz);t.multiplyScalar(this.range.u.max*s),this.u.setDir(t);let p=new Vector3(this.params.vx,this.params.vy,this.params.vz);p.multiplyScalar(this.range.v.max*e),this.v.setDir(p),this.plane.update({uPos:this.params.uPos,vPos:this.params.vPos}),this.domainPlot.update({uPos:this.params.uPos,vPos:this.params.vPos})}}}let ex=new ParametricPlaneAnimation;export default{ex:ex};