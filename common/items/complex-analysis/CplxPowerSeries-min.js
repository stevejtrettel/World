import{Vector2,Vector3}from"../../../3party/three/build/three.module.js";import RodChain from"../../components/basic-shapes/RodChain.js";import ParametricCurve from"../../components/parametric/ParametricCurve.js";function toVec3(e){return new Vector3(e.x,e.y,0)}function cMult(e,t){let s=e.x*t.x-e.y*t.y,i=e.x*t.y+e.y*t.x;return new Vector2(s,i)}class PowerSeries{constructor(e,t=10){this.coef=e,this.n=t}updateCoef(e){this.coef=e}getPartialSums(e){let t=e,s=[];s.push(this.coef(0));for(let i=1;i<this.n;i++){let r=cMult(this.coef(i),t),o=s[i-1].clone();r.add(o),s.push(r),t=cMult(t,e)}return s}}class CplxPowerSeries{constructor(e,t=10){this.params={animate:!0,x:0,y:1},this.n=t,this.z=new Vector2(this.params.x,this.params.y),this.series=new PowerSeries(e,t),this.compute(this.z),this.chain=new RodChain(this.vectors,.05)}compute(e){this.z=e,this.pts=this.series.getPartialSums(this.z),this.vectors=[];for(let e=0;e<this.n;e++)this.vectors.push(toVec3(this.pts[e]))}resizeRods(){this.chain.update(this.vectors)}setPosition(e,t,s){this.chain.setPosition(e,t,s)}addToScene(e){this.chain.addToScene(e)}addToUI(e){let t=this;e.add(t.params,"x",-3,3,.01).onChange((function(e){t.z=new Vector2(e,t.params.y),t.compute(t.z),t.resizeRods()})),e.add(t.params,"y",-3,3,.01).onChange((function(e){t.z=new Vector2(t.params.x,e),t.compute(t.z),t.resizeRods()})),e.add(t.params,"animate")}tick(e,t){if(this.params.animate){let t=new Vector2(0,6.29*(1+Math.sin(e/4))/2);this.compute(t),this.resizeRods()}}}let factorial=function(e){let t=1;for(let s=1;s<e+1;s++)t*=s;return t},exp=function(e){return new Vector2(1/factorial(e),0)},ex=new CplxPowerSeries(exp,30);const circEqn="\n    vec3 eqn( float s ){\n        return vec3(cos(s),sin(s),0);\n    }\n",circleColor="\n            vec3 colorFn(float s, vec3 xyz){\n             \n             float grid1 = (1.-pow(abs(sin(10.*3.14*s)),0.1))/10.;\n             float grid2 = (1.-pow(abs(sin(50.*3.14*s)),0.1))/25.;\n             float grid3 = (1.-pow(abs(sin(100.*3.14*s)),0.1))/50.;\n             float grid = grid1+grid2+grid3;\n             \n             vec3 base =  0.6 + 0.4*cos(2.*3.14*vec3(s,1.-s,s)+vec3(0,2,4));\n             \n             return base + 2.*vec3(grid);\n            }\n        ";let circlePlot=new ParametricCurve(circEqn,{min:0,max:6.29},{},circleColor,{},.02);circlePlot.addToUI=function(e){},circlePlot.tick=function(e,t){};export default{circle:circlePlot,complex:ex};