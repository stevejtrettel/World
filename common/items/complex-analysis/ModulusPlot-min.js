import ParametricSurface from"../../components/parametric/ParametricSurface.js";import{DoubleSide}from"../../../3party/three/build/three.module.js";import{complex}from"../../shaders/math/complex.js";let defaultParams={};class ModulusPlot{constructor(n=defaultParams){this.params={eqnType:1},this.surfaceColor="\n            vec3 colorFn(vec2 uv, vec3 xyz){\n             \n             //draw gridlines on the domain\n             float grid1 = (1.-pow(abs(sin(10.*3.14*uv.x)*sin(10.*3.14*uv.y)),0.1))/10.;\n             float grid2 = (1.-pow(abs(sin(50.*3.14*uv.x)*sin(50.*3.14*uv.y)),0.1))/25.;\n             float grid3 = (1.-pow(abs(sin(100.*3.14*uv.x)*sin(100.*3.14*uv.y)),0.1))/50.;\n             float grid = grid1+grid2+grid3;\n             \n             //draw height lines for the magnitude\n             float height = (1.-pow(abs(sin(10.*3.14*xyz.y)),0.1))/10.;\n             vec3 col = hsb2rgb(vec3(xyz.y/3.,0.5+height,0.5))-3.*vec3(height);\n             return col+vec3(grid);\n\n            }\n        ",this.eqn=complex+"\n        vec3 eqn(vec2 uv){\n        \n            if(eqnType==1){\n                float u = 3.*uv.x;\n                float v = uv.y/1.5;\n                float re = sin(u)*cosh(v);\n                float im = cos(u)*sinh(v);\n                float mag = sqrt(re*re+im*im);\n                return vec3(v,mag-3.,u);\n            }\n            else if(eqnType==2){\n                float u =2.*uv.x;\n                float v = 2.*uv.y;\n                vec2 ans = ctan(uv);\n                float mag = length(ans);\n                return vec3(v,mag-3.,u);\n            }\n            else if(eqnType==3){\n                float u =2.*uv.x;\n                float v = 2.*uv.y;\n                float mag = exp(u);\n                return vec3(u,mag-3.,v);\n            }\n            else if(eqnType==4){\n                 float u = uv.x;\n                float v = uv.y;\n                float x1 = 1.+u;\n                float x2 = 1.-u;\n                float mag1 = x1*x1+v*v;\n                float mag2 = x2*x2+v*v;\n                float mag = 1./(mag1*mag2);\n                return vec3(u,mag-3.,v);\n            }\n\n            return vec3(0,0,0);\n        }",this.domain={u:{min:-4,max:4},v:{min:-4,max:4}},this.uniforms={eqnType:{type:"int",value:1}};let e={clearcoat:1,side:DoubleSide,envMapIntensity:2};this.surface=new ParametricSurface(this.eqn,this.domain,this.uniforms,this.surfaceColor,e)}addToScene(n){this.surface.addToScene(n)}addToUI(n){let e=this;n.add(e.params,"eqnType",{"sin(z)":1,"tan(z)":2,"exp(z)":3,"1/(z^2-1)":4}).onChange((function(n){e.surface.update(e.params)}))}tick(n,e){}}export default ModulusPlot;